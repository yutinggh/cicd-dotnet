name: Road to Demo

on:
  workflow_dispatch:

jobs:
  coding-standard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Check coding standards
        run: dotnet format --verify-no-changes
  
  unit-test:
    runs-on: ubuntu-latest
    needs: [coding-standard]

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.x
  
      - name: Restore dependencies
        run: dotnet restore
  
      - name: Build
        run: dotnet build --no-restore 

      - name: Test UnitTests
        run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage/UnitTests Tests/UnitTests/UnitTests.csproj

      - name: Code Coverage Summary Report for UnitTests
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage/UnitTests/**/coverage.cobertura.xml'
          badge: true
          format: 'markdown'
          output: 'both'

      - name: Generate Coverage Summary for UnitTests
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          echo "# Unit Tests Coverage" > unit-coverage-summary.md
          reportgenerator -reports:coverage/UnitTests/**/coverage.cobertura.xml -targetdir:CodeCoverage/UnitTests -reporttypes:MarkdownSummary
          cat CodeCoverage/UnitTests/Summary.md >> unit-coverage-summary.md

      - name: Add Unit Test Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: unit-test
          recreate: true
          path: unit-coverage-summary.md

      - name: Write Unit Test Coverage to Job Summary
        run: cat unit-coverage-summary.md >> $GITHUB_STEP_SUMMARY

  regression-test:
    runs-on: ubuntu-latest
    needs: [unit-test]

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.x
  
      - name: Restore dependencies
        run: dotnet restore
  
      - name: Build
        run: dotnet build --no-restore 

      - name: Test RegressionTests
        run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage/RegressionTests Tests/RegressionTests/RegressionTests.csproj

      - name: Code Coverage Summary Report for RegressionTests
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage/RegressionTests/**/coverage.cobertura.xml'
          badge: true
          format: 'markdown'
          output: 'both'

      - name: Generate Coverage Summary for RegressionTests
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          echo "# Regression Tests Coverage" > regression-coverage-summary.md
          reportgenerator -reports:coverage/RegressionTests/**/coverage.cobertura.xml -targetdir:CodeCoverage/RegressionTests -reporttypes:MarkdownSummary
          cat CodeCoverage/RegressionTests/Summary.md >> regression-coverage-summary.md

      - name: Add Regression Test Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: regression-test
          recreate: true
          path: regression-coverage-summary.md

      - name: Write Regression Test Coverage to Job Summary
        run: cat regression-coverage-summary.md >> $GITHUB_STEP_SUMMARY

  deploy-for-testing:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release'
    needs: [regression-test]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Deploy to Testing Environment
        # # Add deployment steps here, such as deploying to a testing environment
        # # Example: Use SSH or FTP to deploy to a testing server
        # # Note: Replace the placeholders with your deployment commands
        # run: |
        #   ssh user@example.com "cd /path/to/deployment && git pull origin release && dotnet publish -o published_folder"
        #   # Example: Restarting the application after deployment
        #   ssh user@example.com "sudo systemctl restart your-application.service"
        run: echo "Deployment to testing environment completed successfully!"

  # release_deployment: # from ehalal
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'release' 
  #   # deploy only to release branch when PR is merged to release

  #   environment:
  #     name: release
  #     url: https://uat.ehalal.mqspectrum.com/
  #   timeout-minutes: 120
  #   env:
  #     STAGING_DOCKER_REGISTRY: 632605022431.dkr.ecr.ap-southeast-1.amazonaws.com
  #     STAGING_TAG: latest
  #     STAGING_DOCKER_NAME: "ehalal/uat/portal"
  #     STAGING_ECS_CLUSTERNAME: "ecs-ehalal-uat-cluster"
  #     STAGING_ECS_SERVICENAME: "ecs-ehalal-uat-service"
  #     STAGING_ECS_CODEDEPLOY_APPLICATION: "uat-ehalal-codedeploy-ecs-app"
  #     STAGING_ECS_CODEDEPLOY_DEPLOYMENT_GROUP: "uat-ehalal-codedeploy-ecs-dg"
  #     STAGING_ECS_TASK_DEFINITION_FAMILY: "td-ehalal-uat"
  #     STAGING_CONTAINER_NAME: "task-ehalal-uat"
  #   steps:
  #     - uses: actions/checkout@v3.2.0
  #     - name: Current date time
  #       uses: Kaven-Universe/github-action-current-date-time@v1.2.0
  #       id: datetime
  #       with:
  #         format: "YYYYMMDDHHmmss"
  #     - run: aws --version
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-region: ${{ env.AWS_REGION }}
  #         aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
  #     - name: Retag Staging ECR for rollback (latest-yyyyMMddhhmmss)
  #       uses: abronin/ecr-retag-action@v1.6.0
  #       with:
  #         # The name to use for the ECR Repository.
  #         repository: ${{ env.STAGING_DOCKER_NAME }}
  #         # The source tag.
  #         tag: ${{ env.STAGING_TAG }}
  #         # The destination tag.
  #         new-tags: ${{ env.STAGING_TAG }}-${{ steps.datetime.outputs.time }}
  #     - run: docker --version
  #     - run: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${STAGING_DOCKER_REGISTRY}
  #     - name: Build Push Docker
  #       id: build-image
  #       uses: docker/build-push-action@v3
  #       with:
  #         push: true
  #         tags: ${{ env.STAGING_DOCKER_REGISTRY }}/${{ env.STAGING_DOCKER_NAME }}:${{ env.STAGING_TAG }}
  #         file: "src/eHalal.Web/Dockerfile"
  #     - run: echo "Image pushed to staging!"
  #     # - run: aws ecs update-service --cluster ecs-ehalal-uat-cluster --service ecs-ehalal-uat-service --force-new-deployment --region ${AWS_REGION}
  #     # - run: echo "Force Redeployment triggered in ECS! Please wait at least 3 minutes for the changes to occur."
  #     - name: Download task definition
  #       id: task-def-download
  #       run: |
  #         aws ecs describe-task-definition --task-definition ${{ env.STAGING_ECS_TASK_DEFINITION_FAMILY }} --query taskDefinition > task-definition.json
  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: ${{ env.STAGING_CONTAINER_NAME }}
  #         image: ${{ steps.build-image.outputs.imageid }}
  #     - name: Set appspec.json values
  #       id: set-appspec-values
  #       env:
  #         container_port: 80
  #         container_name: ${{ env.STAGING_CONTAINER_NAME }}
  #         td_family: ${{ env.STAGING_ECS_TASK_DEFINITION_FAMILY }}
  #         cluster: ${{ env.STAGING_ECS_CLUSTERNAME }}
  #         service: ${{ env.STAGING_ECS_SERVICENAME }}
  #         codedeploy-application: ${{ env.STAGING_ECS_CODEDEPLOY_APPLICATION }}
  #         codedeploy-deployment-group: ${{ env.STAGING_ECS_CODEDEPLOY_DEPLOYMENT_GROUP }}
  #       run: |
  #         export TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition="$td_family" | jq '.taskDefinition.taskDefinitionArn')
  #           cat ./.github/workflows/appspec.json | jq --arg key "$TASK_DEF_ARN" '.Resources[].TargetService.Properties.TaskDefinition=$key' \
  #           | jq --arg key "$container_port" '.Resources[].TargetService.Properties.LoadBalancerInfo.ContainerPort=$key' \
  #           | jq --arg key "$container_name" '.Resources[].TargetService.Properties.LoadBalancerInfo.ContainerName=$key' > .aws/appspec.json
  #           sed -i 's#\\"##g' .aws/appspec.json  
  #     - name: Deploy to Amazon ECS
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         service: ${{ env.STAGING_ECS_SERVICENAME }}
  #         cluster: ${{ env.STAGING_ECS_CLUSTERNAME }}
  #         wait-for-service-stability: true
  #         codedeploy-appspec: .aws/appspec.json
  #         codedeploy-application: ${{ env.STAGING_ECS_CODEDEPLOY_APPLICATION }}
  #         codedeploy-deployment-group: ${{ env.STAGING_ECS_CODEDEPLOY_DEPLOYMENT_GROUP }}